// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/generate-token": {
            "post": {
                "description": "Generates a new JWT (or other) token for user authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Generate a new authentication token",
                "parameters": [
                    {
                        "description": "Token generation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.GenerateTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated token",
                        "schema": {
                            "$ref": "#/definitions/dtos.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid UserId format (must be UUID)",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    },
                    "500": {
                        "description": "Happened internal error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Create user entity in database, making him ready to log in",
                "parameters": [
                    {
                        "description": "Register parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created user in db"
                    },
                    "400": {
                        "description": "Invalid role",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    },
                    "500": {
                        "description": "Happened internal error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/send-sms-code": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Sending sms-code to user to phone number he entered",
                "parameters": [
                    {
                        "description": "Dto with phone number",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.SendSmsCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully sent code"
                    },
                    "400": {
                        "description": "Invalid phone number",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    },
                    "500": {
                        "description": "Happened internal error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/validate-token": {
            "post": {
                "description": "It checks if token is valid and not tried to be changed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Checking if authentication token is valid",
                "parameters": [
                    {
                        "description": "Dto containing token (format of JWT-token)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidateTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dto with field 'is_valid' that shows if token is valid",
                        "schema": {
                            "$ref": "#/definitions/dtos.ValidateTokenResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-sms-code": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verifying SMS code if it is what was sent to user",
                "parameters": [
                    {
                        "description": "Dto with phone number and SMS code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.VerifySmsCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Valid SMS code, giving token"
                    },
                    "400": {
                        "description": "Invalid SMS code",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    },
                    "500": {
                        "description": "Happened internal error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorDto"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Returns 200 if the service is healthy and ready to accept traffic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Infrastructure"
                ],
                "summary": "Health check endpoint for Kubernetes",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.ErrorDto": {
            "type": "object",
            "properties": {
                "error_message": {
                    "type": "string"
                }
            }
        },
        "dtos.GenerateTokenRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dtos.RegisterRequest": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "dtos.SendSmsCodeRequest": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "dtos.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dtos.ValidateTokenRequest": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "dtos.ValidateTokenResponse": {
            "type": "object",
            "properties": {
                "is_valid": {
                    "type": "boolean"
                }
            }
        },
        "dtos.VerifySmsCodeRequest": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "type": "string"
                },
                "sms_code": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JwtBearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "AuthService API",
	Description:      "Service for handling auth, tokens and that stuff",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
